// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ARegister (in = aIn, load = setA, out = aOut, out[0..14] = addressM);
	
	DRegister (in = aluOut, load = setD, out = aluIn1);
	
	PC (in = aOut, load = jump, inc = true, reset = reset, out[0..14] = pc);
	
	ALU (x = aluIn1, y = aluIn2, zx = instruction[11], nx = instruction[10], zy = instruction[9], 
		ny = instruction[8], f = instruction[7], no = instruction[6], out = aluOut, out = outM, zr = zero, ng = negative);
	
	Mux16 (a = aluOut, b = instruction, sel = isAinstruction, out = aIn);
	Mux16 (a = aOut, b = inM, sel = setAM, out = aluIn2);
	
	
	// Set register D
	And (a = instruction[4], b = instruction[15], out = setD);
	
	// Set register A
	Not (in = instruction[15], out = isAinstruction);
	Or (a = instruction[5], b = isAinstruction, out = setA);
	
	// Set WriteM
	And (a = instruction[15], b = instruction[3], out = writeM);
	
	// Set A or M register
	And (a = instruction[15], b = instruction[12], out = setAM);
	
	// Set jump bits
	Not (in = instruction[0], out = not0);
	Not (in = instruction[1], out = not1);
	Not (in = instruction[2], out = not2);
	Not (in = zero, out = notZero);
	Not (in = negative, out = notNegative);
	And (a = notNegative, b = notZero, out = positive);
	Or (a = zero, b = negative, out = zeroORnegative);
	Or (a = zero, b = positive, out = zeroORpositive);
	// JEQ
	And (a = not0, b = not2, out = tmpJEQ1);
	And (a = tmpJEQ1, b = instruction[1], out = tmpJEQ2);
	And (a = tmpJEQ2, b = zero, out = JEQ);
	// JNE
	And (a = instruction[0], b = instruction[2], out = tmpJNE1);
	And (a = tmpJNE1, b = not1, out = tmpJNE2);
	And (a = tmpJNE2, b = notZero, out = JNE);
	// JLT
	And (a = instruction[2], b = not0, out = tmpJLT1);
	And (a = tmpJLT1, b = not1, out = tmpJLT2);
	And (a = tmpJLT2, b = negative, out = JLT);
	// JLE
	And (a = instruction[1], b = instruction[2], out = tmpJLE1);
	And (a = tmpJLE1, b = not0, out = tmpJLE2);
	And (a = tmpJLE2, b = zeroORnegative, out = JLE);
	// JGT
	And (a = instruction[0], b = not1, out = tmpJGT1);
	And (a = tmpJGT1, b = not2, out = tmpJGT2);
	And (a = tmpJGT2, b = positive, out = JGT);
	// JGE
	And (a = instruction[0], b = instruction[1], out = tmpJGE1);
	And (a = tmpJGE1, b = not2, out = tmpJGE2);
	And (a = tmpJGE2, b = zeroORpositive, out = JGE);
	// JMP
	And (a = instruction[0], b = instruction[1], out = tmpJMP);
	And (a = tmpJMP, b = instruction[2], out = JMP);
	
	Or8Way (in[0] = JEQ, in[1] = JNE, in[2] = JLT, in[3] = JLE, in[4] = JGT, in[5] = JGE, in[6] = JMP, in[7] = false, out = jumpTemp);
	And (a = instruction[15], b = jumpTemp, out = jump);
}

